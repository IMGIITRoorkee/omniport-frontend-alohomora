import React, { Component } from 'react'
import axios from 'axios'
import { connect } from 'react-redux'
import { Scrollbars } from 'react-custom-scrollbars'
import {
  Segment,
  Container,
  Header,
  Grid,
  Form,
  Button,
  Message,
  Icon
} from 'semantic-ui-react'
import { isEmpty } from 'lodash'

import { AppHeader, AppFooter, AppMain, getTheme, getCookie } from 'formula_one'
import colorData from 'formula_one/src/assets/colorData.json'
import { urlAlohomora } from '../urls'

import main from 'formula_one/src/css/app.css'
import blocks from '../css/app.css'

class App extends Component {
  constructor (props) {
    super(props)
    this.state = {
      username: '',
      newPassword: '',
      count: 0,
      errors: {},
      success: false,
      successResponse: ''
    }
  }

  handleChange = e => {
    const { name, value } = e.target
    this.setState({
      [name]: value
    })
  }

  handleClick = e => {
    const data = {
      username: this.state.username
    }
    if (this.state.newPassword) {
      data.newPassword = this.state.newPassword
    }
    let headers = {
      'X-CSRFToken': getCookie('csrftoken')
    }
    axios
      .post(urlAlohomora(), data, { headers: headers })
      .then(res => {
        this.setState({
          errors: {},
          success: true,
          successResponse: res.data,
          username: '',
          newPassword: ''
        })
      })
      .catch(err => {
        this.setState({
          errors: err.response.data.errors,
          success: false,
          newPassword: ''
        })
      })
  }
  render () {
    const creators = [
      {
        name: 'Dhruv Bhanushali',
        role: 'Backend developer',
        link: 'https://dhruvkb.github.io/'
      },
      {
        name: 'Praduman Goyal',
        role: 'Frontend developer',
        link: 'https://pradumangoyal.github.io'
      }
    ]

    return (
      <div styleName='main.app'>
        <AppHeader appName='alohomora' mode='app' userDropdown />
        <AppMain>
          <div styleName='main.app-main'>
            <Scrollbars autoHide>
              <Container styleName='blocks.content-div'>
                <Grid centered>
                  <Grid.Column width={6}>
                    <Segment.Group fluid>
                      <Segment attached='top' color='black' textAlign='left'>
                        <Header>
                          Alohomora
                          <Header.Subheader>
                            Reset the password for any user to an autogenerated
                            or the specified password.
                          </Header.Subheader>
                        </Header>
                      </Segment>
                      <Segment attached='bottom' textAlign='left'>
                        <Form>
                          {!isEmpty(this.state.errors) && (
                            <Message
                              negative
                              header='Damn boi! You are terrible at this'
                              list={this.state.errors.username}
                            />
                          )}
                          {this.state.success && (
                            <Message positive>
                              <Message.Header>
                                <Icon name='key' />
                                Ch'trik
                              </Message.Header>
                              <Message.List>
                                <Message.Item>
                                  {this.state.successResponse.status}
                                </Message.Item>
                                <Message.Item>
                                  New password is{' '}
                                  <strong>
                                    <code>
                                      {this.state.successResponse.newPassword}
                                    </code>
                                  </strong>
                                </Message.Item>
                              </Message.List>
                            </Message>
                          )}
                          <Form.Field required>
                            <label>Username</label>
                            <Form.Input
                              name='username'
                              value={this.state.username}
                              onChange={this.handleChange}
                              autoComplete='false'
                              error={Boolean(
                                Object.keys(this.state.errors).find(x => {
                                  return x === 'username'
                                })
                              )}
                            />
                          </Form.Field>
                          <Form.Field>
                            <label>New password</label>
                            <Form.Input
                              type='password'
                              name='newPassword'
                              value={this.state.newPassword}
                              onChange={this.handleChange}
                              autoComplete='false'
                              error={Boolean(
                                Object.keys(this.state.errors).find(x => {
                                  return x === 'newPassword'
                                })
                              )}
                            />
                          </Form.Field>
                          <Form.Field>
                            <Button
                              basic
                              content='Cast'
                              icon='magic'
                              primary
                              onClick={this.handleClick}
                            />
                          </Form.Field>
                        </Form>
                      </Segment>
                    </Segment.Group>
                  </Grid.Column>
                </Grid>
              </Container>
            </Scrollbars>
          </div>
        </AppMain>
        <AppFooter creators={creators} />
      </div>
    )
  }
}

export default connect(
  null,
  null
)(App)
